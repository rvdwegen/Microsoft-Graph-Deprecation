name: Find Deprecated API Files
on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to scan in target repository'
        default: 'main'
        required: true

jobs:
  scan-deprecated:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: microsoftgraph/microsoft-graph-docs-contrib
          ref: ${{ inputs.target_branch }}
          
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          path: workflow-repo
          
      - name: Search for deprecated APIs and endpoints
        id: search
        run: |
          # Create results directory
          mkdir -p results
          
          # Perform deprecated search and save results
          echo "### Deprecated API Files Found ($(date '+%Y-%m-%d'))" > results/report.md
          echo "Branch: ${{ inputs.target_branch }}" >> results/report.md
          echo "" >> results/report.md
          echo "Files containing '(deprecated)' in title:" >> results/report.md
          echo "\`\`\`" >> results/report.md
          
          # Create endpoints array
          echo "[]" > results/endpoints.json
          
          # Process each file
          find api-reference/beta/api -name "*.md" -type f -exec sh -c '
            if grep -l "title:.*\(deprecated\)" "$1" > /dev/null; then
              echo "$1" >> results/files.txt
              
              # Extract title and description
              TITLE=$(grep "^title:" "$1" | sed '"'"'s/^title: *"//;s/"$//''"'"')
              DESC=$(grep "^description:" "$1" | sed '"'"'s/^description: *"//;s/"$//''"'"')
              
              # Find HTTP endpoints in code blocks
              awk -v file="$1" -v title="$TITLE" -v desc="$DESC" '"'"'
                BEGIN { in_block=0 }
                /^```\s*http/ { in_block=1; next }
                /^```/ { in_block=0; next }
                in_block && /^(GET|POST|PUT|PATCH|DELETE)\s+\/[a-zA-Z0-9\/\-_{}]+/ {
                  endpoint=$2
                  method=$1
                  printf "{\"endpoint\":\"%s\",\"method\":\"%s\",\"page\":\"%s\",\"title\":%s,\"description\":%s},\n", 
                    endpoint, 
                    method, 
                    file,
                    "\""title"\"",
                    "\""desc"\""
                }
              '"'"' "$1" >> results/temp_endpoints.txt
            fi
          '"'"' - {} \;
          
          # Create proper JSON array
          if [ -f results/temp_endpoints.txt ]; then
            (echo "["; cat results/temp_endpoints.txt | sed '"'"'$ s/,$//''"'"'; echo "]") | \
            jq '"'"'unique_by(.endpoint)'"'"' > results/endpoints.json
          fi
          
          # Add results to report
          cat results/files.txt >> results/report.md
          echo "\`\`\`" >> results/report.md
          
          # Add summary
          COUNT=$(wc -l < results/files.txt)
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          echo "" >> results/report.md
          echo "Total files found: $COUNT" >> results/report.md
          
          # Move results to workflow repo
          cp results/endpoints.json workflow-repo/
          
      - name: Commit and push endpoints file
        run: |
          cd workflow-repo
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add endpoints.json
          git commit -m "Update deprecated endpoints list [skip ci]" || exit 0
          git push

      - name: Upload results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deprecated-api-scan
          path: results/
          retention-days: 90
