name: Find Deprecated API Files
on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to scan in target repository'
        default: 'main'
        required: true

jobs:
  scan-deprecated:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # This is needed for pushing to the repo
    
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: microsoftgraph/microsoft-graph-docs-contrib
          ref: ${{ inputs.target_branch }}
          
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          path: workflow-repo
          token: ${{ github.token }}  # Use the GitHub token
          
      - name: Search for deprecated APIs and endpoints
        id: search
        run: |
          # Create results directory
          mkdir -p results
          
          # Initialize files
          echo "### Deprecated API Files Found ($(date '+%Y-%m-%d'))" > results/report.md
          echo "Branch: ${{ inputs.target_branch }}" >> results/report.md
          echo "" >> results/report.md
          echo "Files containing '(deprecated)' in title:" >> results/report.md
          echo '```' >> results/report.md
          
          # Create empty endpoints file
          echo "[]" > results/endpoints.json
          touch results/temp_endpoints.txt
          
          # Find all deprecated files first
          find api-reference/beta/api -name "*.md" -type f -exec grep -l "title:.*\(deprecated\)" {} \; > results/files.txt
          
          # Process each file
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              # Extract title and description
              title=$(grep "^title:" "$file" | sed 's/^title: *"//;s/"$//')
              description=$(grep "^description:" "$file" | sed 's/^description: *"//;s/"$//')
              
              # Process HTTP endpoints
              awk -v filepath="$file" -v title="$title" -v desc="$description" '
                BEGIN { in_block=0 }
                /^```\s*http/ { in_block=1; next }
                /^```/ { in_block=0; next }
                in_block && /^(GET|POST|PUT|PATCH|DELETE)\s+\/[a-zA-Z0-9\/\-_{}]+/ {
                  endpoint=$2
                  method=$1
                  printf "{\"endpoint\":\"%s\",\"method\":\"%s\",\"page\":\"%s\",\"title\":\"%s\",\"description\":\"%s\"},\n", 
                    endpoint, 
                    method, 
                    filepath,
                    title,
                    desc
                }
              ' "$file" >> results/temp_endpoints.txt
            fi
          done < results/files.txt
          
          # Create final JSON array
          if [ -s results/temp_endpoints.txt ]; then
            (echo "["; cat results/temp_endpoints.txt | sed '$ s/,$//' ; echo "]") | \
            jq 'unique_by(.endpoint)' > results/endpoints.json
          fi
          
          # Complete the report
          cat results/files.txt >> results/report.md
          echo '```' >> results/report.md
          
          # Add summary
          COUNT=$(wc -l < results/files.txt)
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          echo "" >> results/report.md
          echo "Total files found: $COUNT" >> results/report.md
          
          # Copy to workflow repo
          cp results/endpoints.json workflow-repo/
          
      - name: Commit and push endpoints file
        run: |
          cd workflow-repo
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add endpoints.json
          git commit -m "Update deprecated endpoints list [skip ci]" || exit 0
          git push

      - name: Upload results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deprecated-api-scan
          path: results/
          retention-days: 90
